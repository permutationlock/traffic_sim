<!DOCTYPE html>
<!--
    wildfire.html
    Aven Bross
    17 Aug 2015

    Uses webgl-ggc.js, J3DIMath.js
-->
<html style="overflow: hidden;">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Wildfire Simulation</title>
<style>
#canvas-container {
    position: absolute;
    left: 0px;
    top: 0px;
    width: calc(100%);
}
canvas {
   display: inline;
}
</style>
</head>
<body onload="appMain('can1')"
    style="overflow: hidden; margin: 0; padding: 0; background-color: #000000;">
    
<div id="can1text"
    style="position: absolute; left: 20px; top: 10px;"></div>
<div id="canvas-container">
<canvas id="can1" width="200" height="200"
    style="margin: 0; padding: 0; border:1px solid #000000;"></canvas>
</div>

<script id="vshader1" type="x-shader/x-vertex">
// Vertex Shader #1

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

attribute vec4 vertex_attr;
attribute vec4 color_attr;

varying vec4 color_var;
varying vec3 ptobjcoords;

void main()
{
    // Compute projected vertex position
    gl_Position = projectionMatrix * modelViewMatrix * vertex_attr;

    // Send color to fragment shader
    color_var = color_attr;

    // Send object coordinates to fragment shader
    ptobjcoords = vertex_attr.xyz / vertex_attr.w;
}
</script>

<script id="fshader1" type="x-shader/x-fragment">
// Fragment Shader #1

#ifdef GL_ES
precision mediump float;
#endif

varying vec4 color_var;
varying vec3 ptobjcoords;

void main()
{
    // Set color
    gl_FragColor = color_var;
}
</script>

<script type="text/javascript" src="J3DIMath.js"></script>
<script type="text/javascript" src="webgl-ggc.js"></script>
<script type="text/javascript" src="mersenne-twister.js"></script>
<script type="text/javascript">
// Application Code

// Global variables

// General
var canvas;             // Our canvas
var cwidth, cheight;    // Canvas width & height
var gl;                 // WebGL context
var redisplay_needed;   // True if redisplay needed

var isClicked = false;
var totaltime = 0;

// Shaders
var prog1;              // Shader program object

var EAST = 0;
var NORTH = 1;
var WEST = 2;
var SOUTH = 3;

// Simulation parameters
var rng = new MersenneTwister();

var grid;
var cars;
var stoplights;
var counter = 0;

function Stoplight(x,y){
    this.progress = 10.0;
    this.state = 0;
    this.x = x;
    this.y = y;
    this.redtime = 1.0;
    this.yellowtime = 3.0;
    this.greentime = 10.0;
    this.update = function(dt){
        this.progress += dt;
        if(this.state==0 || this.state==3){
            if(this.progress<this.greentime){
                return;
            }
        }
        else if(this.state == 1 || this.state == 4){
            if(this.progress<this.yellowtime){
                return;
            }
        }
        else{
            if(this.progress<this.redtime){
                return;
            }
        }
        this.state += 1;
        this.state %= 6;
        this.progress = 0.0;
        for(var i=0; i<=1; i++){
            for(var j=0; j<=1; j++){
                if(i==0 && j==0){
                    if(this.state == 0){
                        grid[this.y+j][this.x+i].stop[SOUTH]=false;
                        grid[this.y+j][this.x+i].stop[EAST]=true;
                    }
                    else if(this.state == 3){
                        grid[this.y+j][this.x+i].stop[SOUTH]=true;
                        grid[this.y+j][this.x+i].stop[EAST]=false;
                    }
                    else{
                        grid[this.y+j][this.x+i].stop[SOUTH]=true;
                        grid[this.y+j][this.x+i].stop[EAST]=true;
                    }
                }
                if(i==0 && j==1){
                    if(this.state == 0){
                        grid[this.y+j][this.x+i].stop[NORTH]=false;
                        grid[this.y+j][this.x+i].stop[EAST]=true;
                    }
                    else if(this.state == 3){
                        grid[this.y+j][this.x+i].stop[NORTH]=true;
                        grid[this.y+j][this.x+i].stop[EAST]=false;
                    }
                    else{
                        grid[this.y+j][this.x+i].stop[NORTH]=true;
                        grid[this.y+j][this.x+i].stop[EAST]=true;
                    }
                }
                if(i==1 && j==0){
                    if(this.state == 0){
                        grid[this.y+j][this.x+i].stop[SOUTH]=false;
                        grid[this.y+j][this.x+i].stop[WEST]=true;
                    }
                    else if(this.state == 3){
                        grid[this.y+j][this.x+i].stop[SOUTH]=true;
                        grid[this.y+j][this.x+i].stop[WEST]=false;
                    }
                    else{
                        grid[this.y+j][this.x+i].stop[SOUTH]=true;
                        grid[this.y+j][this.x+i].stop[WEST]=true;
                    }
                }
                if(i==1 && j==1){
                    if(this.state == 0){
                        grid[this.y+j][this.x+i].stop[NORTH]=false;
                        grid[this.y+j][this.x+i].stop[WEST]=true;
                    }
                    else if(this.state == 3){
                        grid[this.y+j][this.x+i].stop[NORTH]=true;
                        grid[this.y+j][this.x+i].stop[WEST]=false;
                    }
                    else{
                        grid[this.y+j][this.x+i].stop[NORTH]=true;
                        grid[this.y+j][this.x+i].stop[WEST]=true;
                    }
                }
            }
        }
    }
}

function Square(y,x,dir,empty, road){
    if(dir == null)
        this.dir = null;
    else
        this.dir = new Direction(dir);
    this.pos = new Position(y,x);
    this.empty = empty;
    this.road = road;
    this.stop = [false, false, false, false];
    this.cars = [false, false, false, false];
    this.occupant = null;
}

function Direction(val){
    this.val = val % 4;
    while(this.val<0) this.val = (4-this.val)%4;
    this.right = function(){
        var temp = this.val - 1;
        if(temp < 0 ) temp += 4;
        return temp;
    }
    this.left = function(){
        var temp = this.val + 1;
        temp %= 4;
        return temp;
    }
    this.behind = function(){
        var temp = this.val + 2;
        temp %= 4;
        return temp;
    }
    this.turnLeft = function(){
        this.val += 1;
        this.val %=4;
    }
    this.turnRight = function(){
        this.val -= 1;
        if(this.val<0) this.val += 4;
    }
    this.valueOf = function(){
        return this.val;
    }
}

function Position(y,x){
    this.x = x;
    this.y = y;
    this.adj = function(dir){
        var nx = this.x;
        var ny = this.y;
        
        if(dir == 1) { ny -= 1; }
        else if(dir == 3) { ny += 1; }
        else if(dir == 2) { nx -= 1; }
        else if(dir == 0) { nx += 1; }
        
        if(0<=nx && nx < grid[0].length && 0<=ny && ny < grid.length){
            return grid[ny][nx];
        }
        else
            return new Square(-1,-1,null,true);
    }
    this.move = function(dir){
        if(dir == NORTH) { this.y -= 1; }
        else if(dir == SOUTH) { this.y += 1; }
        else if(dir == WEST) { this.x -= 1; }
        else if(dir == EAST) { this.x += 1; }
        if(0<=this.x && this.x < grid[0].length && 0<=this.y && this.y < grid.length){
            grid[this.y][this.x].empty = false;
            grid[this.y][this.x].occupant = 
            grid[this.y][this.x].cars[dir] = false;
        }
    }
    this.offGrid = function(){
        return !(0<=this.x && this.x < grid[0].length && 0<=this.y && this.y < grid.length);
    }
}

function Car(y,x,dir){
    this.position = new Position(y,x);
    this.lastSquare = grid[y][x];
    this.dir = new Direction(dir);
    this.stopped = false;
    this.turned = false;    // Don't allow crazy stuff like U turns
    this.color = [rng.random(),rng.random(),rng.random()];
    this.progress = 1.0;
    this.speed = 1.0;
    this.moved = false;
    this.move = function(dt){
        this.progress += this.speed*dt;
        if(this.progress > 0.75 && !this.moved){
            this.moved = true;
            this.lastSquare.empty = true;
        }
        if(this.progress < 1.0) return;
        this.lastSquare = grid[this.position.y][this.position.x];

        var options = [];
        // Look ahead
        if(this.position.adj(this.dir.val).empty && 
           this.position.adj(this.dir.val).stop[this.dir.val]==false){
            options.push(this.dir.val);
        }
        // Look for right turn
        if(this.position.adj(this.dir.right()).empty && !this.turned &&
           this.position.adj(this.dir.right()).dir != null && 
           this.position.adj(this.dir.right()).dir.val == this.dir.right()){
            options.push(this.dir.right());
        }
        // Look for left turn
        if(this.position.adj(this.dir.left()).empty && !this.turned &&
           this.position.adj(this.dir.left()).dir != null && 
           this.position.adj(this.dir.left()).dir.val == this.dir.left()){
            options.push(this.dir.left());
        }
        // Look for left turn accross intersection
        else{
            var square = this.position.adj(this.dir.left());
            while(!this.turned && square.empty == true && square.dir == null &&
                  square.pos.adj(this.dir.val).empty == true &&
                  square.pos.adj(this.dir.val).pos.adj(this.dir.val).empty == true){
                square = square.pos.adj(this.dir.left());
            }
            if(square.dir != null && square.dir.val == this.dir.left()){
                options.push(this.dir.left());
            }
        }
        if(options.length>0){
            this.stopped =false;
            this.moved = false;
            this.progress = 0.0;
            //console.log(options);
            this.position.adj(this.dir.val).cars[this.dir.val] = false;
            var choice = rng.genrand_int32() % options.length;
            this.position.move(options[choice]);
            if(options[choice] != this.dir.val) this.turned = true;
            else this.turned = false;
            this.dir.val = options[choice];
        }
        else{
            this.stopped = true;
            this.position.adj(this.dir.val).cars[this.dir.val] = true;
        }
    }
}

// Draws the roads in one draw call with VBO
function drawRoads(ctx)
{
    // Get attribute locations
    var attriblocs = getAttribLocs(ctx);
    if (!attriblocs)
    {
        errOut(arguments.callee.name + ': ' +
               'Could not get attribute locations');
        return;
    }

    // Set up parameters
    if (typeof r != 'number') r = 0.7;
    if (typeof g != 'number') g = 0.7;
    if (typeof b != 'number') b = 0.7;
    if (typeof a != 'number') a = 1.0;

    // Create VBOs
    var buffs = new Array(5);
    var datas = new Array(5);
    var array_size = 6*grid.length*grid[0].length;
    for (var i = 0; i < 5; ++i)
    {
        buffs[i] = ctx.createBuffer();
        var components = (i == 2 || i == 4) ? 3 : 4;
        datas[i] = new Float32Array(components*array_size);
    }
    var b4 = 0;
    var b3 = 0;
    var square_size = 11.0/grid.length;
    var y = 11.0 - (square_size);
    for(var row = 0; row<grid.length; row++){
        var x = -11.0 + (square_size);
        for(var col = 0; col<grid[0].length; col++){
            var square = grid[row][col];
            
            for (var i = 0; i < 6; ++i)
            {
                var t_x = (i == 1 || i == 4 || i == 5) ? 0. : 1.;
                var t_y = (i == 2 || i == 3 || i == 5) ? 0. : 1.;
                
                var size = 2*square_size;
                
                // vertex coords
                datas[0][b4+0] = x+(t_x-0.5) * size;
                datas[0][b4+1] = y+(t_y-0.5) * size;
                datas[0][b4+2] = 0.;
                datas[0][b4+3] = 1.;

                // color
                if(square.road){
                    datas[1][b4+0] = 0.8;
                    datas[1][b4+1] = 0.8;
                    datas[1][b4+2] = 0.8;
                    datas[1][b4+3] = 1.;
                }
                else{
                    datas[1][b4+0] = 0.0;
                    datas[1][b4+1] = 0.0;
                    datas[1][b4+2] = 0.0;
                    datas[1][b4+3] = 1.;
                }

                // normal
                datas[2][b3+0] = 0.;
                datas[2][b3+1] = 0.;
                datas[2][b3+2] = 1.;

                // texture coords
                datas[3][b4+0] = x;
                datas[3][b4+1] = y;
                datas[3][b4+2] = 0.;
                datas[3][b4+3] = 1.;

                // tangent
                datas[4][b3+0] = 1.;
                datas[4][b3+1] = 0.;
                datas[4][b3+2] = 0.;
                
                b4 += 4;
                b3 += 3;
            }
            x += 2*square_size;
        }
        y -= 2*square_size;
    }
    for (var i in attriblocs)
    {
        if (attriblocs[i] == -1)
            continue;
        var components = (i == 2 || i == 4) ? 3 : 4;
        ctx.bindBuffer(ctx.ARRAY_BUFFER, buffs[i]);
        ctx.bufferData(
            ctx.ARRAY_BUFFER, datas[i], ctx.STATIC_DRAW);
        ctx.vertexAttribPointer(
            attriblocs[i], components, ctx.FLOAT, false, 0, 0);
    }

    // Set up uniforms, enable attributes
    sendMatrices(ctx);
    for (var i in attriblocs)
        if (attriblocs[i] != -1)
            ctx.enableVertexAttribArray(attriblocs[i]);

    // Draw with VBO
    ctx.drawArrays(ctx.TRIANGLES, 0, array_size);

    // Disable attributes
    for (var i in attriblocs)
        if (attriblocs[i] != -1)
            ctx.disableVertexAttribArray(attriblocs[i]);

    // Delete buffer objects
    for (i in buffs)
        ctx.deleteBuffer(buffs[i]);
}

// Draws the roads in one draw call with VBO
function drawCars(ctx)
{
    // Get attribute locations
    var attriblocs = getAttribLocs(ctx);
    if (!attriblocs)
    {
        errOut(arguments.callee.name + ': ' +
               'Could not get attribute locations');
        return;
    }

    // Set up parameters
    if (typeof r != 'number') r = 0.7;
    if (typeof g != 'number') g = 0.7;
    if (typeof b != 'number') b = 0.7;
    if (typeof a != 'number') a = 1.0;

    // Create VBOs
    var buffs = new Array(5);
    var datas = new Array(5);
    var array_size = 6*cars.length;
    for (var i = 0; i < 5; ++i)
    {
        buffs[i] = ctx.createBuffer();
        var components = (i == 2 || i == 4) ? 3 : 4;
        datas[i] = new Float32Array(components*array_size);
    }
    var b4 = 0;
    var b3 = 0;
    var square_size = 11.0/grid.length;
    for(var i=0; i<cars.length; i++){
        var car = cars[i];
        var cx = 0;
        var cy = 0;
        
        if(car.dir == EAST) cx = car.position.x - (1.0-car.progress);
        else if(car.dir == WEST) cx = car.position.x + (1.0-car.progress);
        else cx = car.position.x;
        
        if(car.dir == NORTH) cy = car.position.y + (1.0-car.progress);
        else if(car.dir == SOUTH) cy = car.position.y - (1.0-car.progress);
        else cy = car.position.y;
        
        var x = -11.0 + square_size + 2*square_size*cx;
        var y = 11.0 - square_size - 2*square_size*cy;
        
        //console.log("car: "+i+" position: "+x+","+y + " grid: "+car.position.x+","+car.position.y);
        
        for (var j = 0; j < 6; ++j)
        {
            var t_x = (j == 1 || j == 4 || j == 5) ? 0. : 1.;
            var t_y = (j == 2 || j == 3 || j == 5) ? 0. : 1.;
            
            var size = 0.7*square_size;
            
            // vertex coords
            datas[0][b4+0] = x+(t_x-0.5) * size;
            datas[0][b4+1] = y+(t_y-0.5) * size;
            datas[0][b4+2] = 0.;
            datas[0][b4+3] = 1.;

            // color
            datas[1][b4+0] = car.color[0];
            datas[1][b4+1] = car.color[1];
            datas[1][b4+2] = car.color[2];
            datas[1][b4+3] = 1.;

            // normal
            datas[2][b3+0] = 0.;
            datas[2][b3+1] = 0.;
            datas[2][b3+2] = 1.;

            // texture coords
            datas[3][b4+0] = x;
            datas[3][b4+1] = y;
            datas[3][b4+2] = 0.;
            datas[3][b4+3] = 1.;

            // tangent
            datas[4][b3+0] = 1.;
            datas[4][b3+1] = 0.;
            datas[4][b3+2] = 0.;
            
            b4 += 4;
            b3 += 3;
        }
    }
    for (var i in attriblocs)
    {
        if (attriblocs[i] == -1)
            continue;
        var components = (i == 2 || i == 4) ? 3 : 4;
        ctx.bindBuffer(ctx.ARRAY_BUFFER, buffs[i]);
        ctx.bufferData(
            ctx.ARRAY_BUFFER, datas[i], ctx.STATIC_DRAW);
        ctx.vertexAttribPointer(
            attriblocs[i], components, ctx.FLOAT, false, 0, 0);
    }

    // Set up uniforms, enable attributes
    sendMatrices(ctx);
    for (var i in attriblocs)
        if (attriblocs[i] != -1)
            ctx.enableVertexAttribArray(attriblocs[i]);

    // Draw with VBO
    ctx.drawArrays(ctx.TRIANGLES, 0, array_size);

    // Disable attributes
    for (var i in attriblocs)
        if (attriblocs[i] != -1)
            ctx.disableVertexAttribArray(attriblocs[i]);

    // Delete buffer objects
    for (i in buffs)
        ctx.deleteBuffer(buffs[i]);
}

// drawTile
// Draws a maze tile with the given openings
function drawGridSquare(square, x, y){
    pushMvMatrix(gl);
    
    gl.mvMatrix.translate(x, y, 0.);
    
    if(square.road == false){
        drawSquare(gl, 2., 0., 0., 0.);
    }
    else{
        drawSquare(gl, 2., 0.8, 0.8, 0.8);
    }
        
    popMvMatrix(gl);
}

function drawCar(car,x,y){
    pushMvMatrix(gl);
    
    gl.mvMatrix.translate(x, y, 0.);
    if(!car.stopped){
        if(car.dir == 0) gl.mvMatrix.translate(-2.0+car.progress, 0.0, 0.0);
        else if(car.dir == 1) gl.mvMatrix.translate(0.0, -2.0+car.progress, 0.0);
        else if(car.dir == 2) gl.mvMatrix.translate(2.0-car.progress, 0.0, 0.0);
        else if(car.dir == 3) gl.mvMatrix.translate(0.0, 2.0-car.progress, 0.0);
    }
    drawSquare(gl, 1.0, 0.0, 0.0, 0.0);
    gl.mvMatrix.scale(0.85, 0.85, 0.);
    drawSquare(gl, 1.0, car.color[0], car.color[1], car.color[2]);
    
    popMvMatrix(gl);
}

function drawStoplight(stoplight,x,y){
    pushMvMatrix(gl);
    
    gl.mvMatrix.translate(x, y, 0.);
    
    pushMvMatrix(gl);
    gl.mvMatrix.translate(-1.0,-1.0,0.0);
    drawSquare(gl, 0.6, 0.0, 0.0, 0.0);
    if(stoplight.state == 3) drawSquare(gl, 0.5, 0.0, 1.0, 0.0);
    else if(stoplight.state == 4) drawSquare(gl, 0.5, 1.0, 1.0, 0.0);
    else drawSquare(gl, 0.5, 1.0, 0.0, 0.0);
    popMvMatrix(gl);
    
    pushMvMatrix(gl);
    gl.mvMatrix.translate(3.0,-1.0,0.0);
    drawSquare(gl, 0.6, 0.0, 0.0, 0.0);
    if(stoplight.state == 3) drawSquare(gl, 0.5, 0.0, 1.0, 0.0);
    else if(stoplight.state == 4) drawSquare(gl, 0.5, 1.0, 1.0, 0.0);
    else drawSquare(gl, 0.5, 1.0, 0.0, 0.0);
    popMvMatrix(gl);
    
    pushMvMatrix(gl);
    gl.mvMatrix.translate(1.0,1.0,0.0);
    drawSquare(gl, 0.6, 0.0, 0.0, 0.0);
    if(stoplight.state == 0) drawSquare(gl, 0.5, 0.0, 1.0, 0.0);
    else if(stoplight.state == 1) drawSquare(gl, 0.5, 1.0, 1.0, 0.0);
    else drawSquare(gl, 0.5, 1.0, 0.0, 0.0);
    popMvMatrix(gl);
    
    pushMvMatrix(gl);
    gl.mvMatrix.translate(1.0,-3.0,0.0);
    drawSquare(gl, 0.6, 0.0, 0.0, 0.0);
    if(stoplight.state == 0) drawSquare(gl, 0.5, 0.0, 1.0, 0.0);
    else if(stoplight.state == 1) drawSquare(gl, 0.5, 1.0, 1.0, 0.0);
    else drawSquare(gl, 0.5, 1.0, 0.0, 0.0);
    popMvMatrix(gl);
    
    
    popMvMatrix(gl);
}
    


// WebGL Functions

function myDisplay()
{
    gl.clearColor(0., 0., 0., 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    gl.useProgram(prog1);

    //gl.enable(gl.DEPTH_TEST);  

    gl.mvMatrix.makeIdentity();
    gl.mvMatrix.translate(0., 0., -19.);
    pushMvMatrix(gl);
    // Draw 
    for(var i=0; i<grid.length; i++){
        for(var j=0; j<grid[0].length; j++){
            drawGridSquare(grid[i][j], 2*j-grid[0].length+1, grid.length+1-2*i);
        }
    }
    //drawRoads(gl);
    for(var i=0; i<cars.length; i++){
        drawCar(cars[i],2*cars[i].position.x-grid[0].length+1, grid.length+1-2*cars[i].position.y);
    }
    //drawCars(gl);
    drawStoplight(stoplights[0],2*stoplights[0].x-grid[0].length+1, grid.length+1-2*stoplights[0].y);
    popMvMatrix(gl);

    gl.flush();
}


function myIdle()
{
    // Get elapsed time
    var elapsedtime = getElapsedTime(0.1); // Param: max value to return
    
    totaltime += elapsedtime;
    for(var i=0; i<cars.length; i++){
       cars[i].move(elapsedtime);
       if(cars[i].position.offGrid() && cars[i].progress>1.8) {
           cars.splice(i,1);
       }
    }
    for(var i=0; i<stoplights.length; i++){
        stoplights[i].update(elapsedtime);
    }
    
    if(totaltime > 3.0){
        totaltime = 0;
        
        var nc;
        switch(rng.genrand_int32() % 4){
            case 0: nc = new Car(0,2,SOUTH); break;
            case 1: nc = new Car(3,0,EAST); break;
            case 2: nc = new Car(2,5,WEST); break;
            case 3: nc = new Car(5,3,NORTH); break;
        }
        cars.push(nc);
    }
    
    redisplay_needed = true;
}


function myReshape(w, h)
{
    // Set up viewport
    gl.viewport(0, 0, w, h);

    // Set up projection
    gl.pMatrix.makeIdentity();
    gl.pMatrix.perspective(60., w/h, 0.1, 20.0);
}


function myKeyboard(ch)
{
    // Note: Escape, arrows, etc. are handled inconsistently between
    //  browsers. Alas! So we only deal with printable ASCII.
    switch (ch)
    {
        default:
            break;
    }
}


function myMouseMove(x,y){
    if(isClicked){
        
    }
}


function myMouseDown(x,y, right_click){
    isClicked = true;
}


function myMouseUp(x,y){
    isClicked = false;
}


function init()
{
    // Initialize 
    grid = new Array();
    for(var i=0; i<6; i++){
        grid.push(new Array());
        for(var j=0; j<6; j++){
            if((j<2 || j>3) && i>1 && i<4){
                if(i == 2){
                    grid[i].push(new Square(i,j,WEST,true,true));
                }
                else if(i == 3){
                    grid[i].push(new Square(i,j,EAST,true,true));
                }
            }
            else if((i<2 || i>3) && j>1 && j<4){
                if(j==2){
                    grid[i].push(new Square(i,j,SOUTH,true,true));
                }
                else if(j==3){
                    grid[i].push(new Square(i,j,NORTH,true,true));
                }
            }
            else if(j>1 && j<4 && i>1 && i<4){
                grid[i].push(new Square(i,j,null,true,true));
            }
            else{
                grid[i].push(new Square(i,j,null,false,false));
            }
        }
    }
    cars = new Array();
    cars.push(new Car(5,3,NORTH));
    stoplights = new Array();
    stoplights.push(new Stoplight(2,2));

    // Shaders
    prog1 = makeProgramObjectFromIds(gl, 'vshader1', 'fshader1');
}


// Below is kind of a mini-GLUT
//
// Call appMain(canvasId) to start up the app (on document load?)
//
// These global variables should be declared:
//     canvas           - Our canvas object
//     cwidth           - Width of canvas (pixels)
//     cheight          - Height of canvas (pixels)
//     gl               - WebGL context
//     redisplay_needed - Set to true to indicate redisplay needed
//
// These functions will be called as needed, if they exist:
//     init
//     myDisplay
//     myReshape
//     myIdle
//     myKeyboard


// doFrame
// Should be called repeatedly. Calls myIdle and, if needed, myReshape,
// myDisplay.
function doFrame()
{
    // Idle
    if (myIdle) myIdle();

    // Reshape if necessary
    if (canvas.width != cwidth || canvas.height != cheight)
    {
        cwidth = canvas.width;
        cheight = canvas.height;
        if (myReshape) myReshape(cwidth, cheight);
        redisplay_needed=true;
    }

    // Display if necessary
    if (redisplay_needed)
    {
        redisplay_needed = false;
        if (myDisplay) myDisplay();
    }
}


// sizeCanvas
// Called on window resize events
function sizeCanvas()  // Might be given an event argument; ignored
{
    var w = window.innerWidth-200;
    var h = window.innerHeight
    // Make our canvas fill the window
    if(w>h){
        canvas.width = h;
        canvas.height = h;
    }
    else{
        canvas.width = w;
        canvas.height = w;
    }
}


// doKeypress
// Called on keypress event
function doKeypress(evt)
{
    if (evt.charCode && myKeyboard)
        myKeyboard(String.fromCharCode(evt.charCode));
}

// doMouseMove
// Called on mousemove event
function doMouseMove(evt){
    var x = ((evt.clientX)/cwidth)*22-11;
    var y = (evt.clientY/cheight)*(-22)+11;
    if(myMouseMove) myMouseMove(x, y);
}

// doMouseDown
// Called on click event
function doMouseDown(evt){
    var x = ((evt.clientX)/cwidth)*22-11;
    var y = (evt.clientY/cheight)*(-22)+11;
    if(myMouseDown) myMouseDown(x, y);
}

function doMouseUp(evt){
    var x = ((evt.clientX)/cwidth)*22-11;
    var y = (evt.clientY/cheight)*(-22)+11;
    if(myMouseUp) myMouseUp(x, y);
}

function stopContext(evt){
    evt.preventDefault();
}

// addEvent
// Used to add an extra event to the resize event without overwriting
var addEvent = function(elem, type, eventHandle) {
    if (elem == null || typeof(elem) == 'undefined') return;
    if ( elem.addEventListener ) {
        elem.addEventListener( type, eventHandle, false );
    } else if ( elem.attachEvent ) {
        elem.attachEvent( "on" + type, eventHandle );
    } else {
        elem["on"+type]=eventHandle;
    }
}

// appMain
// Our "main" function
function appMain(canvasId)
{
    // Initialize canvas, gl
    canvas = getCanvas(canvasId);
    gl = getGlContext(canvas);
    if (!gl)
        return;

    // Application-specific initialization
    if (init) init();

    // Add event listeners
    sizeCanvas();
    addEvent(window, "resize", sizeCanvas);
    document.addEventListener('keypress', doKeypress, false);
    document.getElementById("can1").addEventListener('mousemove', doMouseMove, false);
    document.getElementById("can1").addEventListener('mousedown', doMouseDown, false);
    document.getElementById("can1").addEventListener('contextmenu', stopContext, false);
    document.getElementById("can1").addEventListener('mouseup', doMouseUp, false);

    // Do our main loop
    redisplay_needed = true;
    animate(doFrame);
}
</script>
</body>
</html>
